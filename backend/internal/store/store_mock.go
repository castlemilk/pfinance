// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source=store.go -destination=store_mock.go -package=store
//

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"
	time "time"

	pfinancev1 "github.com/castlemilk/pfinance/backend/gen/pfinance/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockStore) CreateExpense(ctx context.Context, expense *pfinancev1.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", ctx, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockStoreMockRecorder) CreateExpense(ctx, expense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockStore)(nil).CreateExpense), ctx, expense)
}

// CreateGroup mocks base method.
func (m *MockStore) CreateGroup(ctx context.Context, group *pfinancev1.FinanceGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockStoreMockRecorder) CreateGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockStore)(nil).CreateGroup), ctx, group)
}

// CreateIncome mocks base method.
func (m *MockStore) CreateIncome(ctx context.Context, income *pfinancev1.Income) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncome", ctx, income)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIncome indicates an expected call of CreateIncome.
func (mr *MockStoreMockRecorder) CreateIncome(ctx, income any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncome", reflect.TypeOf((*MockStore)(nil).CreateIncome), ctx, income)
}

// CreateInvitation mocks base method.
func (m *MockStore) CreateInvitation(ctx context.Context, invitation *pfinancev1.GroupInvitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", ctx, invitation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockStoreMockRecorder) CreateInvitation(ctx, invitation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockStore)(nil).CreateInvitation), ctx, invitation)
}

// GetGroup mocks base method.
func (m *MockStore) GetGroup(ctx context.Context, groupID string) (*pfinancev1.FinanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, groupID)
	ret0, _ := ret[0].(*pfinancev1.FinanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockStoreMockRecorder) GetGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockStore)(nil).GetGroup), ctx, groupID)
}

// GetInvitation mocks base method.
func (m *MockStore) GetInvitation(ctx context.Context, invitationID string) (*pfinancev1.GroupInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitation", ctx, invitationID)
	ret0, _ := ret[0].(*pfinancev1.GroupInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitation indicates an expected call of GetInvitation.
func (mr *MockStoreMockRecorder) GetInvitation(ctx, invitationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitation", reflect.TypeOf((*MockStore)(nil).GetInvitation), ctx, invitationID)
}

// GetTaxConfig mocks base method.
func (m *MockStore) GetTaxConfig(ctx context.Context, userID, groupID string) (*pfinancev1.TaxConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxConfig", ctx, userID, groupID)
	ret0, _ := ret[0].(*pfinancev1.TaxConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxConfig indicates an expected call of GetTaxConfig.
func (mr *MockStoreMockRecorder) GetTaxConfig(ctx, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxConfig", reflect.TypeOf((*MockStore)(nil).GetTaxConfig), ctx, userID, groupID)
}

// ListExpenses mocks base method.
func (m *MockStore) ListExpenses(ctx context.Context, userID, groupID string, startDate, endDate *time.Time, pageSize int32) ([]*pfinancev1.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpenses", ctx, userID, groupID, startDate, endDate, pageSize)
	ret0, _ := ret[0].([]*pfinancev1.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpenses indicates an expected call of ListExpenses.
func (mr *MockStoreMockRecorder) ListExpenses(ctx, userID, groupID, startDate, endDate, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpenses", reflect.TypeOf((*MockStore)(nil).ListExpenses), ctx, userID, groupID, startDate, endDate, pageSize)
}

// ListGroups mocks base method.
func (m *MockStore) ListGroups(ctx context.Context, userID string, pageSize int32) ([]*pfinancev1.FinanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx, userID, pageSize)
	ret0, _ := ret[0].([]*pfinancev1.FinanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockStoreMockRecorder) ListGroups(ctx, userID, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockStore)(nil).ListGroups), ctx, userID, pageSize)
}

// ListInvitations mocks base method.
func (m *MockStore) ListInvitations(ctx context.Context, userEmail string, status *pfinancev1.InvitationStatus, pageSize int32) ([]*pfinancev1.GroupInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", ctx, userEmail, status, pageSize)
	ret0, _ := ret[0].([]*pfinancev1.GroupInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockStoreMockRecorder) ListInvitations(ctx, userEmail, status, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockStore)(nil).ListInvitations), ctx, userEmail, status, pageSize)
}

// UpdateGroup mocks base method.
func (m *MockStore) UpdateGroup(ctx context.Context, group *pfinancev1.FinanceGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockStoreMockRecorder) UpdateGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockStore)(nil).UpdateGroup), ctx, group)
}

// UpdateInvitation mocks base method.
func (m *MockStore) UpdateInvitation(ctx context.Context, invitation *pfinancev1.GroupInvitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitation", ctx, invitation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvitation indicates an expected call of UpdateInvitation.
func (mr *MockStoreMockRecorder) UpdateInvitation(ctx, invitation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitation", reflect.TypeOf((*MockStore)(nil).UpdateInvitation), ctx, invitation)
}
